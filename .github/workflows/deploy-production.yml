name: Production Deployment

on:
  push:
    branches: [main]
    paths:
      - "backend/**"
      - "frontend/**"
      - "docker-compose.prod.yml"
      - "deploy.sh"
      - ".env.production"
  workflow_dispatch:
    inputs:
      skip_tests:
        description: "テストをスキップする"
        required: false
        default: false
        type: boolean

jobs:
  test:
    if: ${{ !inputs.skip_tests }}
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27018:27017
        env:
          MONGO_INITDB_DATABASE: juice_academy_test
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 30s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: go mod download

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run backend tests
        working-directory: ./backend
        env:
          MONGODB_TEST_URI: mongodb://localhost:27018
        run: |
          echo "🧪 バックエンドテストを実行中..."
          go test -v ./controllers ./middleware

      - name: Run frontend tests
        working-directory: ./frontend
        run: |
          echo "🧪 フロントエンドテストを実行中..."
          npm run lint
          npx tsc --noEmit

      - name: Build frontend
        working-directory: ./frontend
        env:
          NODE_ENV: production
        run: npm run build

  deploy:
    needs: test
    if: ${{ always() && (needs.test.result == 'success' || inputs.skip_tests) }}
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build production images
        run: |
          echo "🔨 本番環境用Dockerイメージをビルド中..."
          docker-compose -f docker-compose.prod.yml build --no-cache

      - name: Run deployment validation
        run: |
          echo "✅ デプロイメント検証を実行中..."

          # 設定ファイルの存在確認
          if [ ! -f "docker-compose.prod.yml" ]; then
            echo "❌ docker-compose.prod.yml が見つかりません"
            exit 1
          fi

          if [ ! -f "deploy.sh" ]; then
            echo "❌ deploy.sh が見つかりません"
            exit 1
          fi

          # Dockerイメージの確認
          if ! docker images | grep -q "juice_academy"; then
            echo "❌ 本番環境用イメージが見つかりません"
            exit 1
          fi

          echo "✅ デプロイメント検証完了"

      - name: Deploy notification
        run: |
          echo "🚀 本番環境デプロイの準備完了"
          echo "📋 デプロイ情報："
          echo "   - ブランチ: ${{ github.ref_name }}"
          echo "   - コミット: ${{ github.sha }}"
          echo "   - 実行者: ${{ github.actor }}"
          echo ""
          echo "⚠️  注意: 実際のデプロイは手動で実行してください"
          echo "   1. 本番サーバーにSSH接続"
          echo "   2. リポジトリを最新に更新"
          echo "   3. ./deploy.sh を実行"
