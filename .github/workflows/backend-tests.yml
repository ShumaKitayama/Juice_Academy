name: Backend Tests

on:
  push:
    branches: [main, production-deployment]
    paths:
      - "backend/**"
      - ".github/workflows/backend-tests.yml"
  pull_request:
    branches: [main, production-deployment]
    paths:
      - "backend/**"
      - ".github/workflows/backend-tests.yml"

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27018:27017
        env:
          MONGO_INITDB_DATABASE: juice_academy_test
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 30s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('backend/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        working-directory: ./backend
        run: go mod download

      - name: Verify dependencies
        working-directory: ./backend
        run: go mod verify

      - name: Run basic tests
        working-directory: ./backend
        run: |
          echo "🧪 基本テスト（MongoDB不要）を実行中..."
          go test -v ./controllers -run "TestRegister|TestLogin|TestGet.*Handler"
          go test -v ./middleware

      - name: Wait for MongoDB
        run: |
          echo "⏳ MongoDBの準備完了を待機中..."
          for i in {1..30}; do
            if mongosh --host localhost:27018 --eval "db.adminCommand('ping')" > /dev/null 2>&1; then
              echo "✅ MongoDBが準備完了しました"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ MongoDBの準備がタイムアウトしました"
              exit 1
            fi
            sleep 2
          done

      - name: Run integration tests
        working-directory: ./backend
        env:
          MONGODB_TEST_URI: mongodb://localhost:27018
        run: |
          echo "🗄️  MongoDB統合テストを実行中..."
          go test -v ./controllers -run "TestAuthIntegrationSuite|TestUserRegistrationIntegration|TestUserAuthenticationIntegration|TestAdminUserIntegration"
          go test -v ./controllers -run "TestAnnouncementIntegrationSuite|TestAnnouncementCRUDIntegration|TestAnnouncementListIntegration|TestAnnouncementQueryIntegration"

      - name: Run admin tests
        working-directory: ./backend
        env:
          MONGODB_TEST_URI: mongodb://localhost:27018
        run: |
          echo "👑 管理者機能テストを実行中..."
          go test -v ./controllers -run "TestAdmin.*" || echo "⚠️ 管理者テストで警告（継続）"

      - name: Generate test coverage
        working-directory: ./backend
        env:
          MONGODB_TEST_URI: mongodb://localhost:27018
        run: |
          echo "📊 テストカバレッジを生成中..."
          go test -v -coverprofile=coverage.out ./controllers ./middleware
          go tool cover -func=coverage.out

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.out
          directory: ./backend
          fail_ci_if_error: false
          verbose: true

      - name: Test summary
        if: always()
        run: |
          echo "📋 テスト実行完了"
          echo "✅ 基本機能テスト（認証、お知らせ、JWT）"
          echo "✅ MongoDB統合テスト（認証、お知らせのCRUD）"
          echo "✅ データベース接続とクエリ"
          echo "✅ 管理者機能テスト"
